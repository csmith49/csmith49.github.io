<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Calvin Smith</title>
    <link>http://cjsmith.io/</link>
    <description>Recent content on Calvin Smith</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Mar 2020 00:00:00 -0500</lastBuildDate><atom:link href="http://cjsmith.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generating Programmatic Referring Expressions via Program Synthesis</title>
      <link>http://cjsmith.io/papers/icml20/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 -0500</pubDate>
      
      <guid>http://cjsmith.io/papers/icml20/</guid>
      <description>Incorporating symbolic reasoning into machine learning algorithms is a promising approach to improve performance on learning tasks that require logical reasoning. We study the problem of generating a programmatic variant of referring expressions that we call referring relational programs. In particular, given a symbolic representation of an image and a target object in that image, the goal is to generate a relational program that uniquely identifies the target object in terms of its attributes and its relations to other objects in the image.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cjsmith.io/community/popl20aec/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 -0600</pubDate>
      
      <guid>http://cjsmith.io/community/popl20aec/</guid>
      <description>I served on the POPL 2020 Artifact Evaluation Committee.</description>
    </item>
    
    <item>
      <title>Synthesizing Differentially Private Programs</title>
      <link>http://cjsmith.io/papers/icfp19/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 -0500</pubDate>
      
      <guid>http://cjsmith.io/papers/icfp19/</guid>
      <description>Inspired by the proliferation of data-analysis tasks, recent research in program synthesis has had a strong focus on enabling users to specify data-analysis programs through intuitive specifications, like examples and natural language. However, with the ever-increasing threat to privacy through data analysis, we believe it is imperative to reimagine program synthesis technology in the presence of formal privacy constraints.
In this paper, we study the problem of automatically synthesizing randomized, differentially private programs, where the user can provide the synthesizer with a constraint on the privacy of the desired algorithm.</description>
    </item>
    
    <item>
      <title>On Synthesis for Differential Privacy</title>
      <link>http://cjsmith.io/workshops/synt19/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 -0500</pubDate>
      
      <guid>http://cjsmith.io/workshops/synt19/</guid>
      <description>Data analysis has the capability to enrich the lives of many, yet it presents a fundamental threat to individual privacy. Formal privacy constraints such as differential privacy serve to protect individual rights while allowing large-scale data analytics to proceed relatively unhindered. However, such constraints are a significant barrier to the access of relevant data. In this abstract, we give a solution that leverages type-directed synthesis and the privacy-aware type system DFuzz to allow users to automatically and efficiently synthesize programs that respect privacy constraints.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cjsmith.io/community/cav19aec/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 -0500</pubDate>
      
      <guid>http://cjsmith.io/community/cav19aec/</guid>
      <description>I served on the CAV 2019 Artifact Evaluation Committee.</description>
    </item>
    
    <item>
      <title>Trace Abstraction Modulo Probability</title>
      <link>http://cjsmith.io/papers/popl19/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 -0600</pubDate>
      
      <guid>http://cjsmith.io/papers/popl19/</guid>
      <description>We propose trace abstraction modulo probability, a proof technique for verifying high-probability accuracy guarantees of probabilistic programs. Our proofs over-approximate the set of program traces using failure automata, finite-state automata that upper bound the probability of failing to satisfy a target specification. We automate proof construction by reducing probabilistic reasoning to logical reasoning: we use program synthesis methods to select axioms for sampling instructions, and then apply Craig interpolation to prove that traces fail the target specification with only a small probability.</description>
    </item>
    
    <item>
      <title>Program Synthesis with Equivalence Reduction</title>
      <link>http://cjsmith.io/papers/vmcai19/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 -0600</pubDate>
      
      <guid>http://cjsmith.io/papers/vmcai19/</guid>
      <description>We introduce program synthesis with equivalence reduction, a synthesis methodology that utilizes relational specifications over components of a given synthesis domain to reduce the search space. Leveraging a blend of classic and modern techniques from term rewriting, we use relational specifications to discover a canonical representative per equivalence class of programs. We show how to design synthesis procedures that only consider programs in normal form, thus pruning the search space. We discuss how to implement equivalence reduction using efficient data structures, and demonstrate the significant reductions it can achieve in synthesis time.</description>
    </item>
    
    <item>
      <title>Discovering Relational Specifications</title>
      <link>http://cjsmith.io/papers/fse17/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 -0500</pubDate>
      
      <guid>http://cjsmith.io/papers/fse17/</guid>
      <description>Formal specifications of library functions play a critical role in a number of program analysis and development tasks. We present Bach, a technique for discovering likely relational specifications from data describing input–output behavior of a set of functions comprising a library or a program. Relational specifications correlate different executions of different functions; for instance, commutativity, transitivity, equivalence of two functions, etc. Bach combines novel insights from program synthesis and databases to discover a rich array of specifications.</description>
    </item>
    
    <item>
      <title>Constraint-Based Synthesis of Datalog Programs</title>
      <link>http://cjsmith.io/papers/cp17/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 -0500</pubDate>
      
      <guid>http://cjsmith.io/papers/cp17/</guid>
      <description>We study the problem of synthesizing recursive Datalog programs from examples. We propose a constraint-based synthesis approach that uses an SMT solver to efficiently navigate the space of Datalog programs and their corresponding derivation trees. We demonstrate our technique’s ability to synthesize a range of graph-manipulating recursive programs from a small number of examples. In addition, we demonstrate our technique’s potential for use in automatic construction of program analyses from example programs and desired analysis output.</description>
    </item>
    
    <item>
      <title>MapReduce Program Synthesis</title>
      <link>http://cjsmith.io/papers/pldi16/</link>
      <pubDate>Mon, 13 Jun 2016 00:00:00 -0500</pubDate>
      
      <guid>http://cjsmith.io/papers/pldi16/</guid>
      <description>By abstracting away the complexity of distributed systems, large-scale data processing platforms—MapReduce, Hadoop, Spark, Dryad, etc.—have provided developers with simple means for harnessing the power of the cloud. In this paper, we ask whether we can automatically synthesize MapReduce-style distributed programs from input–output examples. Our ultimate goal is to enable end users to specify large-scale data analyses through the simple interface of examples. We thus present a new algorithm and tool for synthesizing programs composed of efficient data-parallel operations that can execute on cloud computing infrastructure.</description>
    </item>
    
  </channel>
</rss>
